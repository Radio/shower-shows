Привет!
Меня зовут Максим, я работаю в CGI. Мы делаем магазины на Мадженто.
Я провожу много собеседований на должность программиста.
В основном мы собеседуем мидлов, что, конечно, не удивительно.
На собеседовании основная вещь, которой я уделяю внимание, это ответ на вопрос "Почему?".
Ответы на эти вопросы зачастую намного сложнее найти в интернете,
и в том, как человек рассуждает кроется вся магия. Это, конечно, не значит,
что справочные знания не важны, часто они являются ниточками ведущими к пониманию причины.

Я часто встречал людей-решал [], которые хорошо знают инструмент
и умеют быстро решить задачу без лишних вопросов.

    [люди-решала]

Работать с такими людьми — одно удовольствие.
Но их решения часто никуда не годятся с точки зрения дальнейшей поддержки.
Хорошие решения требуют времени на размышления.

    [размышления: чай (кто чай не пьет, тот чмо)]

Сегодня я буду говорить об ООП и отвечать на вопросы "Почему?".
Если в какой-то момент у вас появится чувство, что я недоговариваю, поднимайте руку.

    [майндмап]

Итак, ООП.

— Кто использует ООП в работе?

Почему?
- удобно
- адекватная модель мира
- позволяет расширять код
- позволяет выделять абстракции

ООП это методология программирования, основанная на представлении программы в виде
совокупности объектов, каждый из которых является экземпляром определенного класса.
Объект — это сущность, которая имеет состояние и поведение, которой можно посылать сообщения,
и которая может на них реагировать, используя свои данные.

Объект в программе — это репрезентация объектов, понятий в реальном мире.
Под реальным миром здесь я подразумеваю предметную область, для которой пишется программа — домен.

Это одна из самых важных вещей, которую следует понимать в ООП.
Из этого понимания происходят очень много вещей, таких как:
- Single Responsibility
- композиция
- инкапсуляция

У всего одна причина.

Инкапсуляция
============

Это скрытие реализации объекта, его внутреннего устройства.
Это не защита данных, вы не скроете данные в объекте, не защитите от хакеров.
Вы скроете реализацию от программистов, не позволите полагаться на нее.

— Почему это важно?

Потому что всякая реализация вторична.
Реализация — это алгоритмы, это конкретные хранилища или протоколы.
И все это постоянно меняется.

    [Implementation is changing: algorithms, storages, protocols]

Что первично, так это абстракция — интерфейс вашего класса.
Какие сообщение он может принимать, и как на них реагировать.
И это меняться не должно, если только у вас не меняется домен,
а значит вы пишете новые абстракции.

При взаимодействии с объектом единственное, на что может полагаться программист — это на его интерфейс.
Публикуя интерфейс класса, вы даете обещание: дай мне это, и я сделаю вот это.

— Как часто вы даете обещания?

Мы стараемся давать поменьше обещаний, потому что их нужно выполнять :)
Так и с интерфейсами. Когда вы пишите public, вы обещаете. Теперь это ваша головная боль.

Чем меньше внутренностей вы публикуете, тем меньше болит ваша голова.

Наследование
============

Для описания структуры и поведения объектов в ООП используются классы.
И согласно концепции классы выстраиваются в иерархию таким образом,
что дочерние классы обладают свойствами и поведением своих родительский классов.

Зачем нам это нужно?
Чтобы выделять общее поведение в абстракции.
Зачем мы это используем?
Чтобы изменить поведение классов.

    [комикс про это]

И это не правильно.
Смотрите, мы берем объект: стакан.

    [стакан]

Это простой объект, для него есть класс.
И вот мы хотим пить чай и стакан нам не подходит, потому что он горячий.
Нам нужна чашка.

    [чашка]

Она такая же, как стакан, только с ручкой.
Мы создем новый класс Чашка, наследуем от стакана и добавляем к нему ручку.
Все просто. Но теперь мы в заднице.
Потому что приходит создатель стакана и меняет стекло на пластик.
Или на более хрупкое стекло, которое трескается при температуре выше 80 градусов.
Это, кстати, можете быть и вы сами, или ваш коллега на вашем же проекте.

Все потому, что на самом деле чашка не должна наследовать стакан.
Вы должны выделить общее поведние и вынести его в абстракцию.
Даже если кажется, что чашка это просто расширенный стакан.

Изменение или расширение поведения должно просиходить за счет новой реализации абстракции.
Иначе вы создаете зависимость, которая однаджы прийдет к вам с косой.

    [смерть]

Даже если для этого вам нужно скопировать кусок кода — это не страшно.
Потому что в своем классе вы решите только свою задачу, а не чью-то другую,
которая на первый взгляд кажется похожей на вашу.
В большинстве случае вам не стоит наследовать реальные классы. Только абстрактные.
Как минимум, для наследования реального класса вам нужна четкая причина.
Наследуйте только тогда, когда вы спроектировали класс для наследования.
В остальных случаях старайтесь проектировать классы таким образом,
чтобы их поведение можно было изменить без наследования.
Например, используйте стратегии или декораторы.

Полиморфизм
===========

Это понятие пришло из теории типов.
В общем случае это способность функции обрабатывать данные разных типов.
Для ООП важным следствием этого выступает то, что функции над абстрактным типом
нечувствительны к его структуре, и различные реализации этого типа
могут свободно подменять друг друга, не влияя на поведение этих функций.

Когда функция работает с объектом, она использует его интерфейс.
Значит один и тот же интерфейс может быть реализован по-разному, но функции должно быть плевать на это.
Важно только то, что поведение этих реализаций должно соответствовать ожиданию.
Иначе ваша программа не сможет.

Небольшой пример:

<?php
interface Container {
    public function drop();
}

class Glass implements Container {
    public function drop() { /* well, crash */ }
}

class Cup implements Container {
    public function drop() { /* well, crash, and throw the handle out */ }
}

class Cat {
    public function dropContainer(Container $container) {
        $container->drop();
    }
}

$cat = new Cat();
$cat->dropContainer(new Glass);
$cat->dropContainer(new Cup);
$cat->runAway();

?>

И вам на самом деле не важно, какой именно контейнер будет:

<?php

class ContainerCollection implement Iterator {
    public function current() : Container { /* ... */ };
    // ...
}

$containersOnTable = new ContainerCollection();

// Your mom fills the collection here
EventManager::dispatch('serve_table', $containers);

array_walk($containersOnTable, function(Container $container) use ($cat) {
    $cat->dropContainer($container);
});

?>

Designing class methods
=======================

Ок, мы разобрались с основными понятиями ООП.
Теперь поговрим о взаимодействии между объектами.
Оно происходит, когда один объект вызывает метод другого объекта, передавая ему какие-то данные.
Т.е. один объект передает другому какое-то сообщение.

    [Вызов простого метода с парметрами]

Объект также может запросить какие-то данные у другого объекта.
В ответ на такой запрос второй объект вернет первому какой-то документ. Это тоже сообщение.

    [Запрос и возварт значения]

Т.е. сообщения можно разделить на три типа:
- Команды, — для изменения состояния объекта
- Запросы, — для получения информации от объекта
- Документы — ответ на запрос.

Проектируя метод следует четко понимать, к какому типу он относится.

    [метод-команда]

Метод-команда принимает запрос на изменение и не возвражает значений.
Метод-команда должен либо выполнится успешно, либо выбросить исключение.

    [метод-запрос]

Метод-запрос принимает запрос на какую-то информацию.
Метод-запрос всегда возвращает значение объявленного типа. Если это не возможно, метод выбрасывает исключение.
Метод-запрос никогда не изменяет состояние объекта.

Этот принцип назвается Command Query Separation (CQS).
Почему стоит так делать?
Такое разделение дает вам уверенность, в том, что вызов методов-запросов
не изменяет состояние объектов. Их можно вызывать в любом порядке, их результат можно кешировать.

В свою очередь вы всегда знаете, что состояние будет изменено, если вы вызываете методы команды.
Вам не нужно проверять результат после каждого изменения, внося дополнительные разветвления в код.
Вместо этого вы используете try/catch, который намного более удобнее и мощнее.

    [избегайте сеттеров]

Избегайте сеттеров, где это возможно.
Если вы написали класс, в котором есть 5 свойств, 5 геттеров и сеттеров — это плохой класс.
В нем инкапсуляции.

Давайте рассмотрим простой объект:
<?php

class Person {
    private $firstName;
    private $lastName;
    private $email;
    private $gender;

    // __constructor()
    // getters
    // setters
}

$person = new Person('Sheldon', 'Cooper', 'shelly@gmail.com', 'M');

$person->setFirstName('Penny');
$person->setGender('F');

render($person);

?>

    [пенни купер]

Вместо такого "автоматического" бездумного проектирования, задумайтесь,
как может изменятся ваш объект. И может ли вообще.
Незменяемые объекты — это просто прекрасно. Это ключ к увеличению стабильности и уменьшению багов.
Если может изменятся, то подумайте, как.
Можно ли изменить имя без фамилии? Можно ли изменить пол, не изменив имя?
Вот, как этот объект мог бы выглядеть:

<?php

class Person {
    private $firstName, $lastName, $email, $gender;

    public function rename(NameChangingRequest $request) {
        // change first/last/... names depending on request
        // throw exception if name is not male, for instance
    }

    public function changeGender(GenderChangingRequest $request) {
        // A request which contains also the new name,
        // maybe the reason or whatever is needed.
    }
}

$person->changeGender(new GenderChangingRequest('M', 'New Name'));
?>

Таким образом вы обеспечиваете валидность ваших объектов.
Сущности всегда должны быть валидны.

Еще одна важная вещь для обеспечаения валидности объектов:
метод-команда должен быть транзакцией. Вот небольшой пример:

<?php

class Product {
    public function reduceQuantity($deltaQuantity) {
        $this->quantity -= $deltaQuantity;
    }

    public function verifyStockAvailability() {
        if ($this->quantity == 0) {
            $this->removeFromStock();
        }
    }
}

$product->reduceQuantity($orderedQuantity);
$product->verifyStockAvailability();

?>

Что, если первые метод выполнится, а второй вывалится с ошибкой?
Что, елси кто-то забудет вызвать второй метод вообще?
Чтобы не допускать такого, стоить делать так:

<?php


class Product {
    private function reduceQuantity($deltaQuantity) { ... }
    private function verifyStockAvailability() { ... }

    public function takeFromStock($quantity) {
        try {
            $this->reduceQuantity($orderedQuantity);
            $this->verifyStockAvailability();
        } catch() {
            // ...
        }
    }
}

$product->takeFromStock($orderedQuantity);
?>

Здесь мы делаем методы приватными, и вместо них публикуем только один метод "takeFromStock()".
И этот метод теперь отвечает за состояние объекта. И если где-то что-то пошло не так,
он восстановит исходное состояние, или сделает то, что нужно согласно вашей бизнес-логике.

И здесь вы видите, как важны названия для методов. Они отражают суть совершаемых действий.
Названия очень важны в программировании. Понятнон название — лучши способ предотвратить ошибку.

Я часто встречаю небрежность, вроде такой:

<?php
$product = 'Ski Boots'; // product name
$product = 456; // product id
$product = ['id' => 456, 'name' => 'Ski Boots']; // product data
?>

Но, конечно, в коде это не так явно, а как-то вот так:

<?php
function getProductUrl($product) {
    return '/' . str_replace(' ', '-', strtolower($product));
}
?>

Мое правило такое:

$product — это объект.
$productName — это строка.
$productId — это идентификатор.
$productData — это массив или структура.

Назвайте вещи согласно их действителному значению.
И в первую очередь это относится к интерфейсам классов.

Говоря о ваидности объекта мы говорим о его состоянии.
Состояние объекта — это набор его данных.
В теории баз данных есть понятие "домен", которое определяет допустимое множество значений
какого-либо атрибута.
И вам нужно за этим следить.
Каждый раз, когда вы имеете дело, например, с номером телефона. Или адресом электронной почты.
Пусть у вас есть форма регистрации, где я могу ввести свой адрес.

    [нарисовать?]

Вы можете сделать проверку этой формы где-то на уровне контроллера.
Но это будет значит, что валидность сущностей, т.е. вашей бизнес-логики,
будет достигаться за счет слоя контроллера.
А ведь это зависимость и очень серьезная.
Такие вещи должны быть в слое бизнес-логики.
Конечно, вы можете реализовывать валидацию в ваших сущностях,
но должны ли они этим заниматься?
Хорошим способом не заставлять их будет использование объектов-значений, value-objects.

<?php

$person->addContactInformation(new EmailAddress('max.gopey@gmail.com'));
$person->addContactInformation(new LinkedInProfile('@max.gopey'));

$this->redirect(new Url('https://stackoverflow.com'));

?>

Value-object всегда immutable. Т.е. если вам нужно изменить значение, вы создаете новый объект.
Конечно, такой объект должен быть всегда валидный, поэтому конструктор не должен позволять
создавать невалидные объекты. Поскольку value-класс как раз и описывает тип данных,
это его прямая ответственность.

К сожалению в php пока практически не развита перегрузка операторов, для того,
чтобы с такими объектами можно было удобно работать, сравнивая их.
Хотя уже есть RFC для этого.

SOLID
=====

Open-Closed

Liskov substitution