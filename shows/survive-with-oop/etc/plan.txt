1. Что такое ООП и какие проблемы оно решает.
    - какие преимущества по сравнению с процедурным подходом
    - почему ООП так удобен для нас
    - что такое объект и класс?
        естественность Single Responsibility из определения объекта.
        естественность композиции из определения объекта.
        когда речь заходит о программах, появляются новые объекты, не свойственные окружающему нас миру.
        Это могут быть сервисы, адаптеры, валидаторы, DTO.
        "If you are not able to find a name for a class, then ask yourself if this class makes sense."
    - Antipattern: Classes as Namespaces

2. Наследование, инкапсуляция и полиморфизм.
    - зачем нужно наследование
        - чтобы не дублировать код общий для подклассов.
        - чтобы построить иерархию (биологи)
    - зачем не нужно наследование
        Inherit only when you design for it.
            Deny to inherit with "final" keyword. 
            Doing so you make sure that a person who tries to solve his problem will solve it in his own way. Which is better because he will solve only what he needs. And no inherit some weird logic that you wrote.
        Don't inherit to change the functionality.
        When you inherit — can you describe in words what are differences between two classes?
             (32:00 Extremely defensive PHP)
    - зачем нужна инкапсуляция
    - зачем нужен полиморфизм
        У методов должно быть одинаковое поведение, тогда для них будет работать один и тот же внешний код — принцип подстановки Лисковой.
        
3. SOLID-шмолид.
    ? - возможно, прийти к каждому принципу отдельно.
    Распечатать буквы SOLID и выдать всем, чтобы они поднимали их, когда увидят принципы или когда я спрошу.

4. Designing class methods
    - doAction / getValue
    - no place for setters?
        Because entities should always be valid.
    - Name things by their real value
        Product is an object
        Product name is a string
        Product ID is an integer or a hash
        Product data is an array or a structure
    - Method is a transaction (21:10 Extremely defensive PHP)

6. Use Value-objects:
    When a value is not a measure (like length, height, weight, number of, etc.) and you can name it:
    - Id
    - Url
    - Email
    - Phone number
    - Date
    - Price
    - Version
    - etc.

7. Null-objects
    - I don't like them because they break the concept.
    - Null-objects could not be well tested.
    - Can you test that a null-object does nothing. For example it doesn't write any logs.
    - Be more creative with such cases.

?. Object Calisthenics
    1. Only One Level Of Indentation Per Method
    2. Don’t Use The ELSE Keyword
    3. Wrap All Primitives And Strings
    4. First Class Collections
    5. One Dot Per Line
    6. Don’t Abbreviate
    7. Keep All Entities Small
    8. No Classes With More Than Two Instance Variables
    9. No Getters/Setters/Properties

I need code examples!
A lot of.
But this should be 45 minutes.
