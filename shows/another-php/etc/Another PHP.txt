#Topic: How else can you write the code in PHP?

#Description
Usually we are limited with our environment and habits. When we make changes to a product or when we work with a team we follow the coding standards and the existing approaches to make our life and life of our teammates easier.
But often we do the same when we start a new product on our own ruled by our habits and by the limitations of our horizon.
This talk is intended to introduce some uncustomary ways to write code.

# Another PHP

Agenda

1. Код-стандарты
2. Не про код-стандарты
3. ООП, это все, что мы можем?
4. Хватит теории, даешь примеры.
5. С чего все началось: Gitlab composer
6. Array traversing
7. Generators/Coroutines
8. Functional programming
9. Explicit logical operators
10. Explicit Regexp

# Код-стандарты

В мире существуют код-стандарты. Я надеюсь, вы об этом слышали :)
В мире PHP существуют код-стандарты. Много код-стандартов.
Существуют даже рекомендации к стандартам — PSR.
Самые распространненные стандарты - Zend.
Старые добрые Pear.
Самые популярные — Wordpress.
У каждого фреймворка есть код-стандарты. У нас в CGI есть свои код-стандарты :)

Стандраты помогают работать в командах. Стандраты помогают в опенсорсе.
Они нужны для контроля качества.
Они нужны для того, чтобы код был читаем.

# Не про код стандарты

Но сегодня я хотел поговорить о друхих стандартах.
Которые, в общем-то, даже и не стандарты вовсе, а я бы сказал подходы.
Подходы к написанию кода.

# ООП, это все, что мы можем?

Когда я провожу собеседования, я начинаю с того, что человек знает об ООП.
Я уверен в том, что каждый собеседующийся знает, что его будут спрашивать про ООП,
поэтому он должен подготовиться. Чаще всего, конечно, (и это в лучшем случае)
я слышу мантру вроде:

    Объектно-ориентированное программирования, это принцип программирования,
    построенный на объектах и классах.
    Основные приципы программирования: наследование, инкапсуляция и полиморфизм.

Дальше я обычно выясняю, понимает ли человек, зачем все это нужно.

??? Как вы думаете, зачем нужны классы и объекты?

С их помощью мы можем смоделировать реальный мир (хотя это очень громко, скорее предметную область).
Мы можем сказать, что всякие объекты и понятия реального мира в программе будут в виде объектов,
опишем мы их с помощью классов. И эти объекты будут между собой взаимодействовать.
Что-то друг другу сообщать.

Это очень удобный способ моделирования, потому что он понятный, интуитивный и адекватный.
Его просто освоить. Поэтому он достиг такой популярности.
ООП — как швейцарский нож. С ним комфортно, и он может почти все.
Но для некоторых задач лучше взять другой интсрумент.

Поэтому речь сегодня пойдет не об ООП.

Вы наверное уже думаете, "этот чувак вообще знает, о чем он говорит?" :)

    [slide]
    На самом деле у меня с самого начала был план, и я его придерживался.
    [silde]

На самом деле я затрудняюсь сказать, потому что сегодня мне хотелось бы просто выговориться.
Излить душу. И вот моя история.

# С чего все началось: Gitlab composer

Для наших проектов мы используем композер. Также мы используем гитлаб для управления репозиториями.
Гитлаб это отличная штука. Но еще это опенсорс поэтому там есть не все, что пожелаешь.
Чтобы иметь возможность устанавливать пакеты из нашего репозитория, нам был нужен packages.json.

Gitlab composer — это небольшой интсрумент, который прогуливается по всем репозиториям,
и добавлет в packages.json те из них, у которых есть composer.json.
Первым моим желанием было как-то облагородить его. Мне не понравилось, что вот функции, потом просто какой-то код,
цикл, снова функции, снова код. Лапша какая-то.

Я сидел и смотрел на этот код и ко мне приходило понимание того, что он прекрасен.
Здесь все на своем месте, каждая функция решает свою задачу. Знает только то, что ей нужно.
И я понял, что я бы вот так не написал. Не в том, смысле, конечно, что я бы не следовал солиду
или не справился бы с задачей. А просто мой код был бы совсем другим.

Я подумал о том, что стандарты и принятые практики очень ограничивают нас в творчестве.
Если вы испоьлзуете пленнинг покер, наверное, знаете, что есть такое понятие, как якорь.
Это когда до общего голосования кто-то озвучивает свою оценку.
Остальные сознательно или подсознательно цепляются за нее, начинают сравнивать ее со своим видением.
И это влияет на конечный результат. С фреймворками происходит нечто похожее.

Как это обычно бывает я стал невольно замечать те или иные вещи,
которые я раньше редко использвал или не использовал вообще.

Я бы хотел рассказать о нескольких вещах, и попрошу вас прямо сейчас подумать,
может быть вы можете поделиться чем-то из своего опыта. Может быть нам даже удастся превратить этот спикинг корнер
в спикин раунд.

# Array traversing
- array_column
- array_map
- array_search
- array_reduce
- array_filter
- array_walk
- every / some

# Generators

https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Process/InputStream.php

# Functional programming
# Obvious logical operations
# Obvious Regexp